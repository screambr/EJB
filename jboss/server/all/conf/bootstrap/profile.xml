<?xml version="1.0" encoding="UTF-8"?>

	<!--
		The profile service $Id: profile.xml 101688 2010-03-01 18:27:16Z
		johnbailey $
	-->
<deployment xmlns="urn:jboss:bean-deployer:2.0">

	<classloader><inject bean="profile-classloader:0.0.0" /></classloader>

	<classloader name="profile-classloader" xmlns="urn:jboss:classloader:1.0"
		export-all="NON_EMPTY" import-all="true">
		<root>${jboss.lib.url}jboss-profileservice-spi.jar</root>
		<root>${jboss.lib.url}jboss-profileservice-domain.jar</root>
		<root>${jboss.lib.url}jboss-profileservice-core.jar</root>
		<root>${jboss.lib.url}jboss-profileservice-persistence.jar</root>
	</classloader>

	<!--
		The profile configuration This contains required properties: 
		The uri to the deployers folder. A list of uris to deploy folders.
	-->
	<bean name="UserProfileFactory"
		class="org.jboss.system.server.profileservice.bootstrap.StaticClusteredProfileFactory">
		<property name="confURI">${jboss.server.config.url}</property>
		<property name="deployersURI">${jboss.server.home.url}deployers</property>
		<property name="applicationURIs">
			<list elementClass="java.net.URI">
				<value>${jboss.server.home.url}deploy</value>
			</list>
		</property>
		<!--
			Optional list of URIs that will be kept in sync across the cluster.
			Requires deploy/cluster/farm-deployment-jboss-beans.xml to be
			deployed as well.
		-->
		<property name="farmURIs">
			<list elementClass="java.net.URI">
				<value>${jboss.server.home.url}farm</value>
			</list>
		</property>
		<property name="attachmentStoreRoot">${jboss.server.data.dir}/attachments</property>
        <property name="scanPeriod"><inject bean="ScanPeriod"/></property>
	</bean>

    <!-- The scan period in seconds -->
    <bean name="ScanPeriod" class="org.jboss.profileservice.profile.metadata.plugin.ScanPeriod">
        <property name="scanPeriod">5</property>
    </bean>

	<!-- The profile service configuration -->
	<bean name="ProfileServiceConfig" class="org.jboss.profileservice.config.ProfileServiceConfig">
		<property name="deployerRegistry"><inject bean="ProfileDeployerPluginRegistry" /></property>
		<property name="profileFactory"><inject bean="TypedProfileFactory" /></property>
		<property name="lifeCycleActions"><inject bean="ProfileLifeCycleCallbackActions" /></property>
	</bean>

	<!-- The Profile Service Bootstrap -->
	<bean name="ProfileServiceBootstrap" class="org.jboss.system.server.profileservice.bootstrap.BasicProfileServiceBootstrap">
		<constructor>
			<parameter><inject bean="jboss.kernel:service=Kernel" /></parameter>
			<parameter><inject bean="ProfileServiceConfig" /></parameter>
		</constructor>
		<property name="profileFactory"><inject bean="UserProfileFactory" /></property>
		<property name="hdScannerFactory"><inject bean="HDScannerFactory" /></property>
	</bean>
	
	<!-- A deployerPlugin registry - used when we have to swap the deployer -->
	<bean name="ProfileDeployerPluginRegistry" class="org.jboss.profileservice.deployment.ProfileDeployerPluginRegistry">
		<constructor><parameter><inject bean="jboss.kernel:service=Kernel" /></parameter></constructor>
	</bean>
	
	<bean name="MainDeployerPlugin" class="org.jboss.system.server.profileservice.deployers.MainDeployerPlugin">
		<constructor>
			<parameter><inject bean="MainDeployer" /></parameter>
			<parameter><inject bean="ProfileDeployerPluginRegistry" /></parameter>
		</constructor>
	</bean>

	<bean name="BasicProfileFactory" class="org.jboss.profileservice.profile.BasicProfileFactory">
		<constructor><parameter><inject bean="ProfileServiceConfig" /></parameter></constructor>
		<property name="repositoryManager"><inject bean="ArtifactRepositoryManager" /></property>
	</bean>
	
	<bean name="ScanningProfileFactory" class="org.jboss.profileservice.profile.ScanningProfileFactory">
		<constructor><parameter><inject bean="ProfileServiceConfig" /></parameter></constructor>
		<property name="repositoryManager"><inject bean="ArtifactRepositoryManager" /></property>
		<property name="modificationChecker"><inject bean="DelegateModificationChecker" /></property>	
	</bean>
	
	<!-- The bootstrap profile factory -->
	<bean name="BootstrapProfileFactory" class="org.jboss.profileservice.profile.bootstrap.BootstrapProfileFactory">
		<constructor><parameter><inject bean="ProfileServiceConfig" /></parameter></constructor>
		<property name="repositoryManager"><inject bean="ArtifactRepositoryManager" /></property>
	</bean>

	<!-- The profile repository factory -->
	<bean name="ProfileRepositoryFactory" class="org.jboss.system.server.profileservice.repository.TypedProfileRepository">
		<!-- Accept any DeploymentRepositoryFactory -->
		<incallback method="addRepositoryFactory" />
		<uncallback method="removeRepositoryFactory" />
	</bean>
	
	<!-- The virtual deployment repository -->
	<bean name="ArtifactRepositoryManager" class="org.jboss.profileservice.repository.artifact.ArtifactRepositoryManager">
		<incallback method="addRepository" />
		<incallback method="addRepositoryFactory" />
		<uncallback method="removeRepository" />
		<uncallback method="removeRepositoryFactory" />
	</bean>
	
	<!-- The profile factories -->
	<bean name="TypedProfileFactory" class="org.jboss.profileservice.TypedProfileFactory">
		<incallback method="addProfileFactory" />
		<uncallback method="removeProfileFactory" />
	</bean>
	
	<!-- The management action controller -->
	<bean name="ActionController" class="org.jboss.profileservice.management.AbstractActionController">
		<incallback method="addListener" />
		<uncallback method="removeListener" />	
	</bean>
	
	<!-- The lifecycle callback action registry -->
	<bean name="ProfileLifeCycleCallbackActions" class="org.jboss.profileservice.dependency.plugin.ProfileLifeCycleCallbackActions">
		<constructor><parameter><inject bean="ActionController" /></parameter></constructor>
		<incallback method="addCallback" />
		<uncallback method="removeCallback" />
	</bean>
	
	<bean name="FileArtifactRepositoryFactory" class="org.jboss.profileservice.repository.artifact.file.FileArtifactRepositoryFactory">
		<constructor>
			<parameter class="java.net.URI">${jboss.server.home.url}</parameter>
			<parameter><inject bean="ProfileServiceConfig" /></parameter>
		</constructor>
	</bean>
	
	<bean name="MavenArtifactMetaData" class="org.jboss.profileservice.repository.artifact.maven.MavenArtifactRepositoryMetaData" />
	<bean name="MavenArtifactRepository" class="org.jboss.profileservice.repository.artifact.maven.LocalMavenArtifactRepository">
		<constructor>
			<parameter><inject bean="MavenArtifactMetaData" /></parameter>
			<parameter class="java.net.URI">${jboss.server.home.url}</parameter>
		</constructor>
	</bean>

	<!-- The structure modification cache and checker -->
	<bean name="StructureModCache" class="org.jboss.deployers.vfs.spi.structure.modified.DefaultStructureCache">
		<destroy method="flush" />
	</bean>

	<!-- This just checks metadata locations -->
	<bean name="StructureModificationChecker" class="org.jboss.deployers.vfs.spi.structure.modified.MetaDataStructureModificationChecker">
		<constructor><parameter><inject bean="MainDeployer" /></parameter></constructor>
		<property name="cache"><inject bean="StructureModCache" /></property>
		<property name="filter"><inject bean="FileStructure" /></property>
	</bean>

	<!-- We just visit wars, but exclude classes, lib, dev dirs -->
	<bean name="WebVisitorAttributes" class="org.jboss.vfs.util.IncludeExcludeVisitorAttributes">
		<constructor>
			<parameter>
				<set>
					<value>.war</value>
				</set>
			</parameter>
			<parameter>
				<set>
					<value>WEB-INF/classes</value>
					<value>WEB-INF/lib</value>
					<value>WEB-INF/dev</value>
				</set>
			</parameter>
		</constructor>
	</bean>

	<bean name="DelegateModificationChecker" class="org.jboss.system.server.profileservice.deployers.DelegateModificationChecker">
		<property name="modificationChecker"><inject bean="StructureModificationChecker" /></property>
	</bean>
	
	<bean name="HDScannerFactory" class="org.jboss.profileservice.deployment.hotdeploy.DefaultHDScannerFactory">
		<constructor><parameter><inject bean="ActionController" /></parameter></constructor>
	</bean>
	<bean name="HDScannerCallbackAction" class="org.jboss.profileservice.deployment.hotdeploy.HDScannerLifeCycleCallback">
		<constructor><parameter><inject bean="HDScannerFactory" /></parameter></constructor>
	</bean>
	
	<!-- Farming profile -->

   <!-- The clustered deployment repository factory -->
   <bean name="ClusteredDeploymentRepositoryFactory" class="org.jboss.system.server.profileservice.repository.clustered.ClusteredDeploymentRepositoryFactory">
      <property name="deploymentFilter"><inject bean="DeploymentFilter" /></property>
      <property name="checker"><inject bean="StructureModificationChecker" /></property>
      <!-- Accept any RepositoryClusteringHandler -->
      <incallback method="addRepositoryClusteringHandler" />
      <!-- Accept any LocalContentManagerFactory -->
      <incallback method="addLocalContentManagerFactory" />
      <uncallback method="removeRepositoryClusteringHandler" />
      <uncallback method="removeLocalContentManagerFactory" />
   </bean>
   
   <bean name="ClusteredProfileFactory" class="org.jboss.system.server.profileservice.repository.clustered.ClusteredProfileFactory" >
	<property name="profileRepository"><inject bean="ProfileRepositoryFactory" /></property>
   </bean>
   
   <!--  Handles persistence of metadata about clustered DeploymentRepository content -->
   <bean name="ClusteredDeploymentRepositoryMetadataPersister"
         class="org.jboss.system.server.profileservice.repository.clustered.local.JAXBRepositoryContentMetadataPersister">
      <constructor>
         <!-- Here we use the constructor version that takes the Server impl and 
              uses it to find the data dir. You could alternatively use a version 
              that takes a URI or a File. -->
         <parameter class="org.jboss.bootstrap.api.as.server.JBossASBasedServer"><inject bean="JBossServer"/></parameter>
      </constructor>
   </bean>
         
   <!--  Factory for manager of local persistence of clustered DeploymentRepository content -->
   <bean name="FilesystemLocalContentManagerFactory" 
         class="org.jboss.system.server.profileservice.repository.clustered.local.file.FilesystemLocalContentManagerFactory">
      <property name="metadataPersister"><inject bean="ClusteredDeploymentRepositoryMetadataPersister"/></property>
      <property name="tempDirURI">file:${jboss.server.temp.dir}${/}cluster-repo</property>
   </bean>

	<!--
		A persistence factory for creating the persisted format of
		ManagedComponents
	-->
	<bean name="PersistenceFactory" class="org.jboss.profileservice.persistence.AbstractPersistenceFactory">
		<constructor><parameter><inject bean="ManagedObjectFactory" /></parameter></constructor>
		<!-- Accept any ComponentMapper -->
		<incallback method="addComponentMapper" />
		<!-- Accept any ManagedObjectPersistencePlugin -->
		<incallback method="addPersistencePlugin" />
		<uncallback method="removeComponentMapper" />
		<uncallback method="removePersistencePlugin" />
	</bean>

	<!-- The persistence repository -->
	<bean name="PersistenceRepository"
		class="org.jboss.system.server.profileservice.persistence.AbstractPersistenceRepository">
		<constructor><parameter class="java.io.File"><inject bean="UserProfileFactory" property="attachmentStoreRoot" /></parameter></constructor>
		<property name="mainDeployer"><inject bean="MainDeployer" /></property>
		<property name="serializer"><inject bean="AttachmentsSerializer" /></property>
		<property name="persistenceFactory"><inject bean="PersistenceFactory" /></property>
	</bean>

	<bean name="AttachmentsSerializer" class="org.jboss.system.server.profileservice.persistence.JAXBAttachmentSerializer">
		<constructor><parameter><inject bean="UserProfileFactory" property="attachmentStoreRoot" /></parameter></constructor>
	</bean>

	<bean name="ProfileServicePersistenceDeployer" class="org.jboss.system.server.profileservice.persistence.deployer.ProfileServicePersistenceDeployer">
		<property name="persistenceRepository"><inject bean="PersistenceRepository" /></property>
	</bean>

	<bean name="KernelDeploymentComponentMapper" class="org.jboss.deployers.plugins.managed.KernelDeploymentComponentMapper">
		<constructor><parameter><inject bean="PersistenceFactory" /></parameter></constructor>
	</bean>
	<bean name="ServiceDeploymentComponentMapper" class="org.jboss.system.deployers.managed.ServiceDeploymentComponentMapper">
		<constructor><parameter><inject bean="PersistenceFactory" /></parameter>
		</constructor>
	</bean>
	
	<!-- A filter for excluding files from the scanner -->
	<bean name="DeploymentFilter" class="org.jboss.vfs.util.ExtensibleFilter">
		<!-- Files starting with theses strings are ignored -->
		<property name="prefixes">#,%,\,,.,_$</property>
		<!-- Files ending with theses strings are ignored -->
		<property name="suffixes">#,$,%,~,\,v,.BAK,.bak,.old,.orig,.tmp,.rej,.sh</property>
		<!-- Files matching with theses strings are ignored -->
		<property name="matches">.make.state,.nse_depinfo,CVS,CVS.admin,RCS,RCSLOG,SCCS,TAGS,core,tags</property>
	</bean>

</deployment>
